name: Dockerized Application CI/CD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'  # Trigger on any feature branch
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened] # Trigger on PR open/update/reopen

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  IMAGE_NAME: your-awesome-app  # Customizable image name

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Lint with Flake8
        run: flake8 . --count --show-source --statistics
      - name: Test with Pytest
        run: pytest --junitxml=pytest-report.xml
      - name: Upload Test Report
        uses: actions/upload-artifact@v3
        with:
          name: pytest-report
          path: pytest-report.xml

  build-and-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        include:
          - target: dev
            dockerfile: Dockerfile.dev
          - target: prod
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v3
      - name: Make Scripts Executable
        run: chmod +x install_docker_ultimate_plus_pro_max.sh build-image-pro-max-plus-ultra.sh
      - name: Install Docker and Tools
        run: ./install_docker_ultimate_plus_pro_max.sh
      - name: Build Docker Image (${{ matrix.target }})
        run: ./build-image-pro-max-plus-ultra.sh -n ${{ env.IMAGE_NAME }}-${{ matrix.target }} -f ${{ matrix.dockerfile }}
      - name: Scan Image for Vulnerabilities (${{ matrix.target }})
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}-${{ matrix.target }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  push-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Container Registry
        run: echo "${{ secrets.CONTAINER_REGISTRY_TOKEN }}" | docker login your-registry.com --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin
      - name: Push Docker Image
        run: docker push your-registry.com/${{ env.IMAGE_NAME }}:latest
            - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            docker-compose pull
            docker-compose up -d --force-recreate
      - name: Health Check
        uses: jtalk/url-health-check-action@v2
        if: always()  # Run even if deployment fails
        with:
          url: https://your-application.com  # Replace with your app URL
          max-attempts: 3
          retry-interval: 10
        continue-on-error: true  # Allow workflow to continue even if health check fails

  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-scan, push-and-deploy]
    if: always()  # Run even if previous jobs fail
    steps:
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # Customize fields
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notify on Failure
        if: failure()
        run: |
          echo "Workflow failed! Check the logs for details."
          # Here you could add additional commands to collect and report error details
          # For example, you could use the following to get the logs of the failed job:
          # echo "Failed job logs:"
          # curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          #   https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/jobs/$GITHUB_JOB_ID/logs
