name: Dockerized Application CI/CD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  IMAGE_NAME: your-awesome-app  # Replace with your actual image name

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Specify your Python version (e.g., 3.9)
          cache: 'pip'
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Lint with Flake8
        run: flake8 . --count --show-source --statistics
      - name: Test with Pytest
        run: pytest --junitxml=pytest-report.xml

  build-and-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        include:
          - target: dev
            dockerfile: Dockerfile.dev
            context: . # Specify the build context if not the root directory
          - target: prod
            dockerfile: Dockerfile
            context: . # Specify the build context if not the root directory
    steps:
      - uses: actions/checkout@v4
      - name: Build and Tag Image (${{ matrix.target }})
        run: |
          docker build \
            --build-arg TARGET=${{ matrix.target }} \ 
            -t ${{ env.IMAGE_NAME }}-${{ matrix.target }}:${{ github.sha }} \
            -f ${{ matrix.dockerfile }} \
            ${{ matrix.context }}
      - name: Scan Image for Vulnerabilities (${{ matrix.target }})
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}-${{ matrix.target }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'


  push-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Container Registry
        run: echo "${{ secrets.CONTAINER_REGISTRY_TOKEN }}" | docker login your-registry.com --username ${{ secrets.CONTAINER_REGISTRY_USERNAME }} --password-stdin
      - name: Push Images to Registry
        run: |
          docker push ${{ env.IMAGE_NAME }}-dev:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}-prod:${{ github.sha }} 
          docker push ${{ env.IMAGE_NAME }}-prod:latest # Update 'latest' tag for rolling updates


  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-scan, push-and-deploy]
    if: always() 
    steps:
      - name: Notify on Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took 
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notify on Failure
        if: failure()
        run: |
          echo "Workflow failed! Check the logs for details."
          # Here you could add additional commands to collect and report error details
          # For example, you could use the following to get the logs of the failed job:
          # echo "Failed job logs:"
          # curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          #   https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/jobs/$GITHUB_JOB_ID/logs
