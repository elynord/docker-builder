name: Docker Setup and Image Build

on:
  push:
    branches:
      - main
      - develop
      - feature/**  # Trigger on any feature branch
  pull_request:
    branches:
      - main

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  IMAGE_NAME: my-awesome-app  # Default image name, can be overridden per job

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Replace with your desired Python version
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Run Linter (flake8)
        run: flake8 .
      - name: Run Unit Tests (pytest)
        run: pytest

  install-and-build:
    runs-on: ubuntu-latest
    needs: lint-and-test  # Ensure linting and tests pass before building
    steps:
      - uses: actions/checkout@v4
      - name: Make Scripts Executable
        run: chmod +x install_docker.sh
      - name: Install Docker and Tools
        run: ./install_docker.sh
      - name: Build Docker Image (Development)
        if: github.ref == 'refs/heads/develop'
        run: ./build-image.sh -n ${{ env.IMAGE_NAME }}-dev -f Dockerfile.dev
      - name: Build Docker Image (Feature Branch)
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: ./build-image.sh -n ${{ env.IMAGE_NAME }}-feature-${{ github.ref_name }} -f Dockerfile
      - name: Build and Tag Docker Image (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          ./build-image.sh -n ${{ env.IMAGE_NAME }} -f Dockerfile
          docker tag ${{ env.IMAGE_NAME }} your-registry.com/${{ env.IMAGE_NAME }}:latest

  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: install-and-build
    steps:
      - uses: actions/checkout@v4
      - name: Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'your-registry.com/${{ env.IMAGE_NAME }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  push-to-registry:
    runs-on: ubuntu-latest
    needs: [install-and-build, vulnerability-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push Docker Image
        run: docker push your-registry.com/${{ env.IMAGE_NAME }}:latest

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: push-to-registry
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Pull and Run Latest Image on Staging
        run: |
          ssh staging-server 'docker-compose pull && docker-compose up -d'
